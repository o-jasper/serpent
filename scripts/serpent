#!/usr/bin/python
import os
import sys
import re
import json
import serpent

import argparse

commands = 'compile|assemble|compile_to_LLL|LLL|rewrite|parse'

def main():
    parser = argparse.ArgumentParser(description="Serpent compiler and tool.")

    parser.add_argument('command', help='What to do; ' + commands +
                        '\nFirst letters also allowed')
    parser.add_argument('value', help='Input data.')
    parser.add_argument('--input', help='Preferred input type. serpent|assembly|LLL',
                        default='serpent')

    args = parser.parse_args()
    # Single letter commands for convenience.
    short = {'c':'compile', 'a':'assemble', 'l':'LLL', 'r':'rewrite', 'p':'parse'}
    if args.command.lower() in short:
        args.command = short[args.command.lower()]

    if args.command not in commands.split('|'):  # Check if actual command.
        print(';Incorrect command; ' + args.command)
        print(';Not one of ' + commands)
        return

    if args.command == 'LLL':  # Convenience.
        args.command = 'compile_to_LLL'

    ishort = {'s':'serpent', 'a':'assembly', 'l':'LLL'}
    if args.input.lower() in ishort:
        args.input = ishort[args.input.lower()]
    # Parsing based on provided input.
    if args.input == 'LLL':
        ast = serpent.lllparser.parse_lll(args.value)
    elif args.input == 'assembly':
        # Assembly has its own result.
        if args.command in ['compile_to_LLL', 'rewrite', 'parse']:
            print('Cannot do this to assembly')
        elif args.command == 'assemble':
            print(serpent.lllparser.parse_lll(args.value))
        elif args.command == 'compile':
            print(serpent.compiler.assemble(serpent.lllparser.parse_lll(args.value)))
        return
    elif args.input == 'serpent':
        ast = serpent.parser.parse(args.value)
    else:
        print(';Invalid input type: ' + args.input)
        print(';Allowed: serpent|assembly|LLL')

    if args.command == 'parse':
        print(ast)
    elif args.command == 'rewrite':
        print(serpent.rewriter.rewrite(ast))
    else:
        lll_ast = serpent.compiler.compile_to_lll(ast)
        if args.command == 'compile_to_LLL':
            print(lll_ast)
        else:
            assembly = serpent.compiler.compile_lll(lll_ast)
            if args.command == 'assemble':
                print(assembly)
            elif args.command == 'compile':
                print(serpent.compiler.assemble(assembly).encode('hex'))


if __name__ == '__main__':
    main()
